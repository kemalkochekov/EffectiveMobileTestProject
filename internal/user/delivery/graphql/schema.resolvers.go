package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"GraphQL/api"
	"GraphQL/internal/logger"
	"GraphQL/internal/models"
	"context"
	"strconv"
)

// AddIndividual is the resolver for the addIndividual field.
func (r *mutationResolver) AddIndividual(ctx context.Context, name string, surname string, patronymic *string) (*models.Individual, error) {
	logger.Infof(ctx, "AddIndividual resolver")

	ageResponse, err := r.userUC.GetAgeDataByName(ctx, name)
	if err != nil {
		return nil, err
	}

	genderResponse, err := r.userUC.GetGenderDataByName(ctx, name)
	if err != nil {
		return nil, err
	}

	nationalityResponse, err := r.userUC.GetNationalityDataByName(ctx, name)
	if err != nil {
		return nil, err
	}

	response, err := r.userUC.CreateIndividualData(ctx, ageResponse, genderResponse, nationalityResponse, name, surname, patronymic)
	if err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateIndividual is the resolver for the updateIndividual field.
func (r *mutationResolver) UpdateIndividual(ctx context.Context, id string, name *string, surname *string, patronymic *string) (*string, error) {
	logger.Infof(ctx, "UpdateIndividual resolver")

	idNumber, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}

	message := "Successfully Updated User Data"
	if name != nil && *name != "" {
		age, err := r.userUC.GetAgeDataByName(ctx, *name)
		if err != nil {
			return nil, err
		}

		gender, err := r.userUC.GetGenderDataByName(ctx, *name)
		if err != nil {
			return nil, err
		}

		countryID, err := r.userUC.GetNationalityDataByName(ctx, *name)
		if err != nil {
			return nil, err
		}

		err = r.userUC.UpdateAllUserDataByID(ctx, idNumber, age, gender, countryID, name, surname, patronymic)
		if err != nil {
			return nil, err
		}

		return &message, nil
	}

	err = r.userUC.UpdateIndividualDataByID(ctx, idNumber, surname, patronymic)
	if err != nil {
		return nil, err
	}

	return &message, nil
}

// DeleteIndividual is the resolver for the deleteIndividual field.
func (r *mutationResolver) DeleteIndividual(ctx context.Context, id string) (*bool, error) {
	logger.Infof(ctx, "DeleteIndividual resolver")

	idNumber, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}

	err = r.userUC.DeleteAllUserDataByID(ctx, idNumber)
	if err != nil {
		return nil, err
	}
	ok := true

	return &ok, nil
}

// GetIndividuals is the resolver for the getIndividuals field.
func (r *queryResolver) GetIndividuals(ctx context.Context, filter *models.IndividualFilter, page *int, pageSize *int, sortBy *string) ([]*models.Individual, error) {
	logger.Infof(ctx, "GetIndividuals resolver")

	response, err := r.userUC.GetUserDataByFilter(ctx, filter, page, pageSize, sortBy)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// GetIndividualByID is the resolver for the getIndividualById field.
func (r *queryResolver) GetIndividualByID(ctx context.Context, id string) (*models.Individual, error) {
	logger.Infof(ctx, "GetIndividualByID resolver")

	idNumber, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}

	response, err := r.userUC.GetUserData(ctx, idNumber)
	if err != nil {
		return nil, err
	}

	response.ID = id

	return response, nil
}

// Mutation returns api.MutationResolver implementation.
func (r *Resolver) Mutation() api.MutationResolver { return &mutationResolver{r} }

// Query returns api.QueryResolver implementation.
func (r *Resolver) Query() api.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
